---
Description: Buildkite Elastic Stack for AWS ECS

Parameters:
  BuildkiteAgentToken:
    Description: Buildkite Agent Registration token
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: /buildkite/agent_token

  BuildkiteQueue:
    Description: Queue name that agents will use, targeted in pipeline steps using "queue={value}"
    Type: String
    Default: default
    MinLength: 1

  LambdaBucket:
    Type: String
    Default: "buildkite-aws-stack-ecs-dev"

  LambdaObjectVersion:
    Type: String
    Default: "latest"

  AgentDockerImage:
    Type: String
    Default: "lox24/buildkite-agent-ecs"

  AgentBootstrapDockerImage:
    Type: String
    Default: "lox24/buildkite-agent-ecs"

  MinSize:
    Description: Minimum number of agents to have running
    Type: Number
    Default: 0


Conditions:
  HasLambdaObjectVersions: !Not [ !Equals [ !Ref LambdaObjectVersion, "latest" ] ]

Resources:
  ECSExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ECSRunTask
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
                - ecs:RegisterTaskDefinition
                - ecs:RunTask
                - ecs:DescribeTasks
                - logs:DescribeLogGroups
                - logs:DescribeLogStreams
                - logs:CreateLogStream
                - logs:PutLogEvents
                - logs:FilterLogEvents
              Resource: '*'

  ECSLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      RetentionInDays: 7

  ECSRunTaskLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      RetentionInDays: 1

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref AWS::StackName

  ECSAgentTaskDefinition:
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      NetworkMode: bridge
      ExecutionRoleArn: !Ref ECSExecutionRole
      TaskRoleArn: !Ref ECSTaskRole
      Cpu: "512"
      Memory: "1024"
      Volumes:
        - Name: "buildkite-builds"
          Host:
            SourcePath: "/buildkite/builds"
        - Name: "docker-socket"
          Host:
            SourcePath: "/var/run/docker.sock"
      ContainerDefinitions:
        - Name: buildkite-agent
          Image: !Ref AgentDockerImage
          Essential: true
          Environment:
            - Name: BUILDKITE_AGENT_TOKEN
              Value: !Ref BuildkiteAgentToken
            - Name: BUILDKITE_AGENT_TAGS
              Value: !Sub "queue=${BuildkiteQueue}"
            - Name: BUILDKITE_BOOTSTRAP_DOCKER_IMAGE
              Value: !Ref AgentBootstrapDockerImage
            - Name: BUILDKITE_BUILD_PATH
              Value: "/buildkite/builds"
            - Name: BUILDKITE_ECS_RUN_LOG_GROUP
              Value: !Ref ECSRunTaskLogGroup
            - Name: AWS_REGION
              Value: !Ref AWS::Region
            - Name: ECS_CLUSTER
              Value: !Ref ECSCluster
          LogConfiguration:
            LogDriver: "awslogs"
            Options:
              "awslogs-group": !Ref ECSLogGroup
              "awslogs-region": !Ref AWS::Region
              "awslogs-stream-prefix": "agent"
          MountPoints:
            - ContainerPath: "/buildkite/builds"
              SourceVolume: "buildkite-builds"
            - ContainerPath: "/var/run/docker.sock"
              SourceVolume: "docker-socket"

  ECSAgentService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSCluster
      DesiredCount: !Ref MinSize
      TaskDefinition: !Ref ECSAgentTaskDefinition
      PlacementStrategies:
        - Type: binpack
          Field: cpu

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DescribeECSService
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
                - ecs:Describe*
              Resource:
                - !Ref ECSAgentService
                - !GetAtt ECSCluster.Arn
        - PolicyName: UpdateECSService
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
                - ecs:UpdateService
                - ecs:DescribeServices
              Resource: '*'

  ScheduledRule:
    Type: "AWS::Events::Rule"
    Properties:
      Description: "ScheduledRule"
      ScheduleExpression: "rate(1 minute)"
      State: "ENABLED"
      Targets:
        - Arn: !GetAtt ECSServiceScalerFunction.Arn
          Id: "TargetScalerFunction"

  PermissionForEventsToInvokeLambda:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: { Ref: ECSServiceScalerFunction }
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt ScheduledRule.Arn

  # This mirrors the group that would be created by the lambda, but enforces
  # a retention period and also ensures it's removed when the stack is removed
  ECSServiceScalerLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Join ["/", ["/aws/lambda", !Ref ECSServiceScalerFunction]]
      RetentionInDays: 1

  ECSServiceScalerFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref LambdaBucket
        S3Key: "ecs-service-scaler.zip"
        S3ObjectVersion: !If [HasLambdaObjectVersions, !Ref LambdaObjectVersion, !Ref "AWS::NoValue"]
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 120
      Handler: handler
      Runtime: go1.x
      MemorySize: 128
      Environment:
        Variables:
          BUILDKITE_TOKEN: !Ref BuildkiteAgentToken
          BUILDKITE_QUEUE: !Ref BuildkiteQueue
          BUILDKITE_ECS_CLUSTER: !Ref ECSCluster
          BUILDKITE_ECS_SERVICE: !Ref ECSAgentService
          BUILDKITE_MIN_SIZE: !Ref MinSize
          LAMBDA_TIMEOUT: 1m
          LAMBDA_INTERVAL: 10s

Outputs:
  Cluster:
    Description: A reference to the ECS cluster
    Value: !Ref ECSCluster

  AgentService:
    Description: The ECS Service for the Agent
    Value: !Ref ECSAgentService
