---
Description: Agent Service for Buildkite Elastic Stack

Parameters:
  BuildkiteAgentToken:
    Description: Buildkite Agent Registration token
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: /buildkite/agent_token

  BuildkiteQueue:
    Description: Queue name that agents will use, targeted in pipeline steps using "queue={value}"
    Type: String
    Default: default
    MinLength: 1

  AgentDockerImage:
    Type: String
    Default: "lox24/buildkite-agent-ecs"

  SockguardDockerImage:
    Type: String
    Default: "lox24/sockguard-ecs"

  ECSCluster:
    Description: The name of the ECS cluster to create a service on
    Type: String

  LambdaBucket:
    Type: String
    Default: "buildkite-aws-stack-ecs-dev"

  LambdaScheduleState:
    Type: String
    Default: "ENABLED"

Resources:
  ECSExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  ECSLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      RetentionInDays: 7

  ECSAgentTaskDefinition:
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      NetworkMode: bridge
      ExecutionRoleArn: !Ref ECSExecutionRole
      Cpu: "512"
      Memory: "256"
      ContainerDefinitions:
        - Name: buildkite-agent
          Image: !Ref AgentDockerImage
          Essential: true
          Command: ["start"]
          Environment:
            - Name: BUILDKITE_AGENT_TOKEN
              Value: !Ref BuildkiteAgentToken
            - Name: BUILDKITE_AGENT_TAGS
              Value: !Sub "queue=${BuildkiteQueue}"
            - Name: AWS_REGION
              Value: !Ref AWS::Region
            - Name: DOCKER_HOST
              Value: "unix:///var/run/sockguard/docker.sock"
          LogConfiguration:
            LogDriver: "awslogs"
            Options:
              "awslogs-group": !Ref ECSLogGroup
              "awslogs-region": !Ref AWS::Region
              "awslogs-stream-prefix": "agent"
          MountPoints:
            - SourceVolume: sockguard-sock
              ContainerPath: /var/run/sockguard
            - SourceVolume: buildkite-builds
              ContainerPath: /buildkite/builds
        - Name: sockguard
          Image: !Ref SockguardDockerImage
          Essential: false
          LogConfiguration:
            LogDriver: "awslogs"
            Options:
              "awslogs-group": !Ref ECSLogGroup
              "awslogs-region": !Ref AWS::Region
              "awslogs-stream-prefix": "sockguard"
          MountPoints:
            - SourceVolume: docker-sock
              ContainerPath: /var/run/docker.sock
            - SourceVolume: sockguard-sock
              ContainerPath: /var/run/sockguard
      Volumes:
        - Name: docker-sock
          Host:
            SourcePath: /var/run/docker.sock
        - Name: buildkite-builds
          Host:
            SourcePath: /buildkite/builds
        - Name: sockguard-sock
          DockerVolumeConfiguration:
            Scope: task

  ECSAgentService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSCluster
      DesiredCount: 0
      TaskDefinition: !Ref ECSAgentTaskDefinition
      PlacementStrategies:
        - Type: binpack
          Field: cpu

  ScheduledRule:
    Type: "AWS::Events::Rule"
    Properties:
      Description: "ScheduledRule"
      ScheduleExpression: "rate(1 minute)"
      State: !Ref LambdaScheduleState
      Targets:
        - Arn: !GetAtt ECSServiceScalerFunction.Arn
          Id: "ECSServiceScalerFunction"

  PermissionForEventsToInvokeLambda:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Ref ECSServiceScalerFunction
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt ScheduledRule.Arn

  ECSServiceScalerLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DescribeECSService
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
                - ecs:Describe*
              Resource: '*'
        - PolicyName: UpdateECSService
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
                - ecs:UpdateService
                - ecs:DescribeServices
              Resource: '*'

  # This mirrors the group that would be created by the lambda, but enforces
  # a retention period and also ensures it's removed when the stack is removed
  ECSServiceScalerLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Join ["/", ["/aws/lambda", !Ref ECSServiceScalerFunction]]
      RetentionInDays: 1

  ECSServiceScalerFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref LambdaBucket
        S3Key: "ecs-service-scaler.zip"
      Role: !GetAtt ECSServiceScalerLambdaExecutionRole.Arn
      Timeout: 120
      Handler: handler
      Runtime: go1.x
      MemorySize: 128
      Environment:
        Variables:
          BUILDKITE_TOKEN: !Ref BuildkiteAgentToken
          BUILDKITE_QUEUE: !Ref BuildkiteQueue
          ECS_CLUSTER:     !Ref ECSCluster
          ECS_SERVICE:     !Ref ECSAgentService
          LAMBDA_TIMEOUT:  1m
          LAMBDA_INTERVAL: 10s

Outputs:
  AgentService:
    Description: The ECS Service for the Agent
    Value: !Ref ECSAgentService
