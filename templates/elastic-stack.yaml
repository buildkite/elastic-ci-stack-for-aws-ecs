Description: >
  Buildkite Elastic Stack for AWS ECS

Parameters:
  BuildkiteAgentToken:
    Description: Buildkite agent token
    Type: String
    NoEcho: true
    MinLength: 1

  BuildkiteOrgSlug:
    Description: Buildkite organization slug
    Type: String
    MinLength: 1

  BuildkiteApiAccessToken:
    Description: Buildkite API access token with read_pipelines, read_builds and read_agents (required for metrics)
    Type: String
    NoEcho: true
    MinLength: 1

  BuildkiteQueue:
    Description: Queue name that agents will use, targeted in pipeline steps using "queue={value}"
    Type: String
    Default: default
    MinLength: 1

  MaxPricePerUnitHour:
    Description: The maximum to bid per unit-hour, default is the reserve price for an m2.medium
    Type: String
    Default: "0.0209"

  KeyName:
    Description: The EC2 SSH Key to use for access to the bastion host and the CI instances
    Type: String
    Default: ""

  StackURLBase:
    Description: The s3 url to load nested stacks from
    Type: String
    Default: "https://s3.amazonaws.com/buildkite-aws-stack-ecs-dev"

  AvailabilityZones:
    Type: List<AWS::EC2::AvailabilityZone::Name>
    Description: The Availability Zones to use.
    MinLength: 10

  SubnetConfiguration:
    Type: String
    Description: "How to configure your subnets, must match the availability zones you provided. Note: NAT Gateways are charged at $0.045-0.095 an hour."
    Default: "2 public subnets with public IP's"
    AllowedValues:
      - 2 public subnets with public IP's
      - 3 public subnets with public IP's
      - 4 public subnets with public IP's
      - 5 public subnets with public IP's
      - 6 public subnets with public IP's
      - 2 private subnets + 2 public subnets with NAT Gateways for internet access
      - 3 private subnets + 2 public subnets with NAT Gateways for internet access
      - 4 private subnets + 2 public subnets with NAT Gateways for internet access
      - 5 private subnets + 2 public subnets with NAT Gateways for internet access
      - 6 private subnets + 2 public subnets with NAT Gateways for internet access

Mappings:

  # These are the latest ECS optimized AMIs as of August 2017:
  #
  #   amzn-ami-2017.09.d-amazon-ecs-optimized
  #   ECS agent:  1.16.0
  #   Docker:     17.06.2-ce
  #   ecs-init:   1.16.0-1
  #
  # You can find the latest available on this page of our documentation:
  # http://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html
  # (note the AMI identifier is region specific)

  AWSRegionToAMI:
    us-east-2: { AMI: ami-901338f5 }
    us-east-1: { AMI: ami-13401669 }
    us-west-2: { AMI: ami-9a02a9e2 }
    us-west-1: { AMI: ami-b3adacd3 }
    eu-west-3: { AMI: ami-bd10a7c0 }
    eu-west-2: { AMI: ami-acd5cdc8 }
    eu-west-1: { AMI: ami-7827b301 }
    eu-central-1: { AMI: ami-b378e8dc }
    ap-northeast-2: { AMI: ami-d6f454b8 }
    ap-northeast-1: { AMI: ami-af46dbc9 }
    ap-southeast-2: { AMI: ami-b88e7cda }
    ap-southeast-1: { AMI: ami-fec3b482 }
    ap-south-1: { AMI: ami-c80b5fa7 }
    sa-east-1: { AMI: ami-ca95d6a6 }

  LambdaBucket:
    us-east-1 : { Bucket: "buildkite-lambdas" }
    us-east-2 : { Bucket: "buildkite-lambdas-us-east-2" }
    us-west-1 : { Bucket: "buildkite-lambdas-us-west-1" }
    us-west-2 : { Bucket: "buildkite-lambdas-us-west-2" }
    eu-west-1 : { Bucket: "buildkite-lambdas-eu-west-1" }
    eu-west-2 : { Bucket: "buildkite-lambdas-eu-west-2" }
    eu-central-1 : { Bucket: "buildkite-lambdas-eu-central-1" }
    ap-northeast-1 : { Bucket: "buildkite-lambdas-ap-northeast-1" }
    ap-northeast-2 : { Bucket: "buildkite-lambdas-ap-northeast-2" }
    ap-southeast-1 : { Bucket: "buildkite-lambdas-ap-southeast-1" }
    ap-southeast-2 : { Bucket: "buildkite-lambdas-ap-southeast-2" }
    ap-south-1 : { Bucket: "buildkite-lambdas-ap-south-1" }
    sa-east-1 : { Bucket: "buildkite-lambdas-sa-east-1" }

Resources:
  VPCStack:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL: !Sub "${StackURLBase}/vpc.yaml"
      Parameters:
        AvailabilityZones: !Join [ ",", !Ref AvailabilityZones ]
        SubnetConfiguration: !Ref SubnetConfiguration

  SpotFleet:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL: !Sub "${StackURLBase}/spotfleet.yaml"
      Parameters:
        VPC: !GetAtt VPCStack.Outputs.VPC
        Subnets: !GetAtt VPCStack.Outputs.PrivateSubnets
        ECSCluster: !Ref ECSCluster
        AMI: !FindInMap [AWSRegionToAMI, !Ref "AWS::Region", AMI]
        InitialCapacity: 0
        MaxPricePerUnitHour: !Ref MaxPricePerUnitHour
        KeyName: !Ref KeyName

  ECSExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ ecs.amazonaws.com, ecs-tasks.amazonaws.com ]
            Action: sts:AssumeRole
      Path: /

  ECSExecutionPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: ecsTaskExecutionRole
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - ecr:GetAuthorizationToken
              - ecr:BatchCheckLayerAvailability
              - ecr:GetDownloadUrlForLayer
              - ecr:BatchGetImage
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              - logs:DescribeLogStreams
            Resource: "*"
      Roles:
        - !Ref ECSExecutionRole

  ECSLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      RetentionInDays: 7

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref AWS::StackName

  ECSAgentTaskDefinition:
    Type: "AWS::ECS::TaskDefinition"
    DependsOn:
      - ECSExecutionRole
      - ECSLogGroup
    Properties:
      NetworkMode: bridge
      ExecutionRoleArn: !Ref ECSExecutionRole
      Cpu: 512
      Memory: 2048
      ContainerDefinitions:
        - Name: buildkite-agent
          Image: "buildkite/agent:3"
          Essential: "true"
          Environment:
            - Name: BUILDKITE_AGENT_TOKEN
              Value: !Ref BuildkiteAgentToken
            - Name: BUILDKITE_AGENT_TAGS
              Value: !Sub "queue=${BuildkiteQueue}"
          LogConfiguration:
            LogDriver: "awslogs"
            Options:
              "awslogs-group": !Ref ECSLogGroup
              "awslogs-region": !Ref AWS::Region
              "awslogs-stream-prefix": "agent"

  ECSAgentService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSCluster
      DesiredCount: 0
      TaskDefinition: !Ref ECSAgentTaskDefinition
      PlacementStrategies:
        - Type: binpack
          Field: cpu

  BastionHost:
    Type: "AWS::EC2::Instance"
    Properties:
      KeyName : !Ref KeyName
      InstanceType: t2.nano
      ImageId : !FindInMap [AWSRegionToAMI, !Ref "AWS::Region", AMI]
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet: [ !Ref BastionHostSecurityGroup ]
          SubnetId: !GetAtt VPCStack.Outputs.PublicSubnet1
      UserData:
        'Fn::Base64': !Sub |
          #!/bin/bash
          exec > >(tee /var/log/user-data.log|logger -t user-data ) 2>&1
          yum install -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-signal --region "${AWS::Region}" --stack "${AWS::StackName}" --resource "BastionHost" -e $?
      Tags:
        - Key: Name
          Value: bastion-host
    CreationPolicy:
      ResourceSignal:
        Timeout: PT10M

  BastionHostSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub ${AWS::StackName} BastionHost Security Group
      VpcId: !GetAtt VPCStack.Outputs.VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: AccessToCloudwatchLogsForScalerLambda
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource:
                - !GetAtt ECSLogGroup.Arn
            - Effect: Allow
              Action:
                - ecs:Describe*
                - ecs:UpdateService
              Resource:
                - !Ref ECSAgentService
                - !GetAtt ECSCluster.Arn
            - Effect: Allow
              Action:
                - ec2:ModifySpotFleetRequest
              Resource:
                - "*"

  ScalerFunction:
    Type: AWS::Lambda::Function
    DependsOn:
    - LambdaExecutionRole
    Properties:
      Code:
        S3Bucket: { 'Fn::FindInMap': [LambdaBucket, { Ref: 'AWS::Region' }, 'Bucket'] }
        S3Key: "ecs-agent-scaler/builds/20/handler.zip"
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 120
      Handler: handler.Handle
      Runtime: python2.7
      MemorySize: 128
      Environment:
        Variables:
          BUILDKITE_TOKEN: !Ref BuildkiteApiAccessToken
          BUILDKITE_ORG: !Ref BuildkiteOrgSlug
          BUILDKITE_QUEUE: !Ref BuildkiteQueue
          BUILDKITE_ECS_CLUSTER: !Ref ECSCluster
          BUILDKITE_ECS_SERVICE: !Ref ECSAgentService
          BUILDKITE_SPOT_FLEET: !GetAtt SpotFleet.Outputs.SpotFleet

  ScheduledRule:
    Type: "AWS::Events::Rule"
    Properties:
      Description: "ScheduledRule"
      ScheduleExpression: "rate(1 minute)"
      State: "ENABLED"
      Targets:
        - Arn: !GetAtt ScalerFunction.Arn
          Id: "TargetScalerFunction"

  PermissionForEventsToInvokeLambda:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: { Ref: ScalerFunction }
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt ScheduledRule.Arn

Outputs:
  Cluster:
    Description: A reference to the ECS cluster
    Value: !Ref ECSCluster

  AgentService:
    Description: The ECS Service for the Agent
    Value: !Ref ECSAgentService

