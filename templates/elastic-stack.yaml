Description: >
  Buildkite Elastic Stack for AWS ECS

Parameters:
  BuildkiteAgentToken:
    Description: Buildkite agent token
    Type: String
    NoEcho: true
    MinLength: 1

  BuildkiteOrgSlug:
    Description: Buildkite organization slug
    Type: String
    MinLength: 1

  BuildkiteApiAccessToken:
    Description: Buildkite API access token with read_pipelines, read_builds and read_agents (required for metrics)
    Type: String
    NoEcho: true
    MinLength: 1

  BuildkiteQueue:
    Description: Queue name that agents will use, targeted in pipeline steps using "queue={value}"
    Type: String
    Default: default
    MinLength: 1

  MaxPricePerUnitHour:
    Description: The maximum to bid per unit-hour, default is the reserve price for an m2.medium
    Type: String
    Default: "0.0209"

  KeyName:
    Description: The EC2 SSH Key to use for access to the bastion host and the CI instances
    Type: String
    Default: ""

  StackURLBase:
    Description: The s3 url to load nested stacks from
    Type: String
    Default: "https://s3.amazonaws.com/buildkite-aws-stack-ecs-dev/master/"


Mappings:

  # These are the latest ECS optimized AMIs as of August 2017:
  #
  #   amzn-ami-2017.09.d-amazon-ecs-optimized
  #   ECS agent:  1.16.0
  #   Docker:     17.06.2-ce
  #   ecs-init:   1.16.0-1
  #
  # You can find the latest available on this page of our documentation:
  # http://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html
  # (note the AMI identifier is region specific)

  AWSRegionToAMI:
    us-east-2: { AMI: ami-58f5db3d }
    us-east-1: { AMI: ami-fad25980 }
    us-west-2: { AMI: ami-7114c909 }
    us-west-1: { AMI: ami-62e0d802 }
    eu-west-2: { AMI: ami-dbfee1bf }
    eu-west-1: { AMI: ami-4cbe0935 }
    eu-central-1: { AMI: ami-05991b6a }
    ap-northeast-2: { AMI: ami-7267c01c }
    ap-northeast-1: { AMI: ami-56bd0030 }
    ap-southeast-2: { AMI: ami-14b55f76 }
    ap-southeast-1: { AMI: ami-1bdc8b78 }
    ca-central-1: { AMI: ami-918b30f5 }

Resources:
  VPCStack:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL: !Sub "${StackURLBase}/vpc.yaml"

  SpotFleet:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL: !Sub "${StackURLBase}/spotfleet.yaml"
      Parameters:
        VPC: !GetAtt VPCStack.Outputs.VPC
        Subnets: !GetAtt VPCStack.Outputs.PrivateSubnets
        ECSCluster: !Ref ECSCluster
        AMI: !FindInMap [AWSRegionToAMI, !Ref "AWS::Region", AMI]
        InitialCapacity: 0
        MaxPricePerUnitHour: !Ref MaxPricePerUnitHour
        KeyName: !Ref KeyName
        CloudInitScript: https://s3.amazonaws.com/buildkite-aws-stack-ecs-dev/cloud.init

  Scaler:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL: !Sub "${StackURLBase}/scaler.yaml"
      Parameters:
        BuildkiteOrgSlug: !Ref BuildkiteOrgSlug
        BuildkiteApiAccessToken: !Ref BuildkiteApiAccessToken
        BuildkiteQueue: !Ref BuildkiteQueue

  ECSExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ ecs.amazonaws.com, ecs-tasks.amazonaws.com ]
            Action: sts:AssumeRole
      Path: /

  ECSExecutionPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: ecsTaskExecutionRole
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - ecr:GetAuthorizationToken
              - ecr:BatchCheckLayerAvailability
              - ecr:GetDownloadUrlForLayer
              - ecr:BatchGetImage
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              - logs:DescribeLogStreams
            Resource: "*"
      Roles:
        - !Ref ECSExecutionRole

  ECSLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      RetentionInDays: 7

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref AWS::StackName

  ECSAgentTaskDefinition:
    Type: "AWS::ECS::TaskDefinition"
    DependsOn:
     - ECSExecutionRole
     - ECSLogGroup
    Properties:
      NetworkMode: bridge
      ExecutionRoleArn: !Ref ECSExecutionRole
      Cpu: 512
      Memory: 2048
      ContainerDefinitions:
        - Name: buildkite-agent
          Image: "buildkite/agent:3"
          Essential: "true"
          Environment:
            - Name: BUILDKITE_AGENT_TOKEN
              Value: !Ref BuildkiteAgentToken
            - Name: BUILDKITE_AGENT_TAGS
              Value: !Sub "queue=${BuildkiteQueue}"
          LogConfiguration:
            LogDriver: "awslogs"
            Options:
             "awslogs-group": !Ref ECSLogGroup
             "awslogs-region": !Ref AWS::Region
             "awslogs-stream-prefix": "agent"

  ECSAgentService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSCluster
      DesiredCount: 0
      TaskDefinition: !Ref ECSAgentTaskDefinition
      PlacementStrategies:
        - Type: binpack
          Field: cpu

  BastionHost:
    Type: "AWS::EC2::Instance"
    Properties:
      KeyName : !Ref KeyName
      InstanceType: t2.nano
      ImageId : !FindInMap [AWSRegionToAMI, !Ref "AWS::Region", AMI]
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet: [ !Ref BastionHostSecurityGroup ]
          SubnetId: !GetAtt VPCStack.Outputs.PublicSubnet1
      UserData:
        'Fn::Base64': !Sub |
          #!/bin/bash
          exec > >(tee /var/log/user-data.log|logger -t user-data ) 2>&1
          yum install -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-signal --region "${AWS::Region}" --stack "${AWS::StackName}" --resource "BastionHost" -e $?
      Tags:
        - Key: Name
          Value: bastion-host
    CreationPolicy:
      ResourceSignal:
        Timeout: PT10M

  BastionHostSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub ${AWS::StackName} BastionHost Security Group
      VpcId: !GetAtt VPCStack.Outputs.VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

Outputs:
  Cluster:
    Description: A reference to the ECS cluster
    Value: !Ref ECSCluster

  AgentService:
    Description: The ECS Service for the Agent
    Value: !Ref ECSAgentService

