---
Description: Spot Fleet for Buildkite Elastic Stack

Mappings:
    # These are the latest ECS optimized AMIs as of November 2018:
    #
    #   amzn2-ami-ecs-hvm-2.0.20181112-x86_64-ebs
    #   ECS agent:    1.22.0
    #   Docker:       18.06.1-ce
    #   ecs-init:     1.22.0-1
    #
    # See https://docs.aws.amazon.com/AmazonECS/latest/developerguide/al2ami.html

    AWSRegionToAMI:
        us-east-2:
            AMI: ami-037a92bf1efdb11a2
        us-east-1:
            AMI: ami-0a6b7e0cc0b1f464f
        us-west-2:
            AMI: ami-0c1f4871ebaae6d86
        us-west-1:
            AMI: ami-0184f498956de7db5
        eu-west-3:
            AMI: ami-0caadc4f0db31a303
        eu-west-2:
            AMI: ami-0b5225210a12d9951
        eu-west-1:
            AMI: ami-0acc9f8be17a41897
        eu-central-1:
            AMI: ami-055aa9664ef169e25
        ap-northeast-2:
            AMI: ami-0bdc871079baf9649
        ap-northeast-1:
            AMI: ami-0c38293d60d98af86
        ap-southeast-2:
            AMI: ami-0eed1c915ea891aca
        ap-southeast-1:
            AMI: ami-0e28ff4e3f1776d86
        ca-central-1:
            AMI: ami-02c80e9173258d289
        ap-south-1:
            AMI: ami-0b7c3be99909df6ef
        sa-east-1:
            AMI: ami-078146697425f25a7
        us-gov-est-1:
            AMI: ami-31b5d150

Parameters:
  VPC:
    Description: The VPC to deploy SpotFleet into
    Type: AWS::EC2::VPC::Id

  Subnets:
    Description: The subnets of a VPC to deploy SpotFleet into
    Type: List<AWS::EC2::Subnet::Id>

  MaxSize:
    Description: The maximum capacity for the Spot fleet
    Type: Number
    Default: 50

  MinSize:
    Description: The minimum capacity for the Spot fleet
    Type: Number
    Default: 0

  KeyName:
    Type: String
    Default: ""

  LambdaBucket:
    Type: String
    Default: "buildkite-aws-stack-ecs-dev"

  LambdaObjectVersion:
    Type: String
    Default: "zLuyHtrJoI4cmW0ncXb5eEpUTdjvgwXS"

  LambdaScheduleState:
    Type: String
    Default: "ENABLED"

Conditions:
  HasKeyName: !Not [ !Equals [ !Ref KeyName, "" ] ]

Resources:
  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for ECS instances"
      VpcId: !Ref VPC

  ECSSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref ECSSecurityGroup
      SourceSecurityGroupId: !Ref ECSSecurityGroup
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535

  SpotFleetIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: |
        {
          "Statement": [{
            "Action": "sts:AssumeRole",
            "Effect": "Allow",
            "Principal": {
              "Service": "spotfleet.amazonaws.com"
            }
          }]
        }
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2SpotFleetRole

  ECSRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument: |
        {
          "Statement": [{
            "Action": "sts:AssumeRole",
            "Effect": "Allow",
            "Principal": {
              "Service": "ec2.amazonaws.com"
            }
          }]
        }
      Policies:
        - PolicyName: ecs-service
          PolicyDocument: |
            {
              "Statement": [{
                "Effect": "Allow",
                "Action": [
                "ecs:CreateCluster",
                "ecs:DeregisterContainerInstance",
                "ecs:DiscoverPollEndpoint",
                "ecs:Poll",
                "ecs:RegisterContainerInstance",
                "ecs:StartTelemetrySession",
                "ecs:Submit*",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
                "ecr:BatchCheckLayerAvailability",
                "ecr:BatchGetImage",
                "ecr:GetDownloadUrlForLayer",
                "ecr:GetAuthorizationToken"
                ],
                "Resource": "*"
              }]
            }

  ECSInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref ECSRole

  ECSLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Metadata:
      AWS::CloudFormation::Init:
        config:
          commands:
            01_configure_ecs_agent:
                command: !Sub |
                  echo ECS_CLUSTER=${ECSCluster} > /etc/ecs/ecs.config
                  echo ECS_DISABLE_PRIVILEGED=false >> /etc/ecs/ecs.config
                  echo ECS_AWSVPC_BLOCK_IMDS=true >> /etc/ecs/ecs.config
                  echo ECS_ENABLE_TASK_IAM_ROLE=true >> /etc/ecs/ecs.config
                  echo ECS_ENABLE_TASK_IAM_ROLE_NETWORK_HOST=true >> /etc/ecs/ecs.config
            02_configure_firewall:
                command: |
                  yum install -y iptables-services
                  iptables --insert FORWARD 1 --in-interface docker+ --destination 169.254.169.254/32 --jump DROP
                  sysctl -w net.ipv4.conf.all.route_localnet=1
                  iptables -t nat -A PREROUTING -p tcp -d 169.254.170.2 --dport 80 -j DNAT --to-destination 127.0.0.1:51679
                  iptables -t nat -A OUTPUT -d 169.254.170.2 -p tcp -m tcp --dport 80 -j REDIRECT --to-ports 51679
                  iptables-save | tee /etc/sysconfig/iptables
                  systemctl enable --now iptables
          files:
            "/etc/cfn/cfn-hup.conf":
              mode: 000400
              owner: root
              group: root
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
            "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.ContainerInstances.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSLaunchTemplate
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
    Properties:
      LaunchTemplateData:
        NetworkInterfaces:
          - DeviceIndex: 0
            Groups: [ !GetAtt ECSSecurityGroup.GroupId ]
        KeyName: !If [HasKeyName, !Ref KeyName, !Ref "AWS::NoValue"]
        IamInstanceProfile: { Arn: !GetAtt ECSInstanceProfile.Arn }
        ImageId: !FindInMap [ AWSRegionToAMI, !Ref "AWS::Region", "AMI" ]
        UserData:
          "Fn::Base64": !Sub |
            #!/bin/bash
            yum install -y aws-cfn-bootstrap
            /opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSLaunchTemplate
            /opt/aws/bin/cfn-signal -e $? --region ${AWS::Region} --stack ${AWS::StackName} --resource SpotFleet

  SpotFleet:
    Type: AWS::EC2::SpotFleet
    Properties:
      SpotFleetRequestConfigData:
        AllocationStrategy: lowestPrice
        IamFleetRole: !GetAtt SpotFleetIAMRole.Arn
        TargetCapacity: !Ref MinSize
        ReplaceUnhealthyInstances: true
        TerminateInstancesWithExpiration: true
        LaunchTemplateConfigs:
          - LaunchTemplateSpecification:
              LaunchTemplateId: !Ref ECSLaunchTemplate
              Version: !GetAtt "ECSLaunchTemplate.LatestVersionNumber"
            Overrides:
              - WeightedCapacity: 4
                InstanceType: m5.large
                SubnetId: !Join [ ',', !Ref Subnets ]
          - LaunchTemplateSpecification:
              LaunchTemplateId: !Ref ECSLaunchTemplate
              Version: !GetAtt "ECSLaunchTemplate.LatestVersionNumber"
            Overrides:
              - WeightedCapacity: 8
                InstanceType: m5.xlarge
                SubnetId: !Join [ ',', !Ref Subnets ]
          - LaunchTemplateSpecification:
              LaunchTemplateId: !Ref ECSLaunchTemplate
              Version: !GetAtt "ECSLaunchTemplate.LatestVersionNumber"
            Overrides:
              - WeightedCapacity: 16
                InstanceType: m5.2xlarge
                SubnetId: !Join [ ',', !Ref Subnets ]
          - LaunchTemplateSpecification:
              LaunchTemplateId: !Ref ECSLaunchTemplate
              Version: !GetAtt "ECSLaunchTemplate.LatestVersionNumber"
            Overrides:
              - WeightedCapacity: 32
                InstanceType: m5.4xlarge
                SubnetId: !Join [ ',', !Ref Subnets ]
          - LaunchTemplateSpecification:
              LaunchTemplateId: !Ref ECSLaunchTemplate
              Version: !GetAtt "ECSLaunchTemplate.LatestVersionNumber"
            Overrides:
              - WeightedCapacity: 4
                InstanceType: m4.large
                SubnetId: !Join [ ',', !Ref Subnets ]
          - LaunchTemplateSpecification:
              LaunchTemplateId: !Ref ECSLaunchTemplate
              Version: !GetAtt "ECSLaunchTemplate.LatestVersionNumber"
            Overrides:
              - WeightedCapacity: 8
                InstanceType: m4.xlarge
                SubnetId: !Join [ ',', !Ref Subnets ]
          - LaunchTemplateSpecification:
              LaunchTemplateId: !Ref ECSLaunchTemplate
              Version: !GetAtt "ECSLaunchTemplate.LatestVersionNumber"
            Overrides:
              - WeightedCapacity: 16
                InstanceType: m4.2xlarge
                SubnetId: !Join [ ',', !Ref Subnets ]
          - LaunchTemplateSpecification:
              LaunchTemplateId: !Ref ECSLaunchTemplate
              Version: !GetAtt "ECSLaunchTemplate.LatestVersionNumber"
            Overrides:
              - WeightedCapacity: 32
                InstanceType: m4.4xlarge
                SubnetId: !Join [ ',', !Ref Subnets ]

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref AWS::StackName

  ScheduledRule:
    Type: "AWS::Events::Rule"
    Properties:
      Description: "ScheduledRule"
      ScheduleExpression: "rate(1 minute)"
      State: !Ref LambdaScheduleState
      Targets:
        - Arn: !GetAtt ECSSpotFleetScalerFunction.Arn
          Id: "ECSSpotFleetScalerFunction"

  PermissionForEventsToInvokeLambda:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Ref ECSSpotFleetScalerFunction
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt ScheduledRule.Arn

  ECSSpotFleetScalerLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DescribeECSResources
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
                - ecs:Describe*
                - ecs:List*
              Resource: '*'
        - PolicyName: ModifySpotFleet
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
                - ec2:DescribeSpotFleetRequests
                - ec2:ModifySpotFleetRequest
              Resource: '*'

  # This mirrors the group that would be created by the lambda, but enforces
  # a retention period and also ensures it's removed when the stack is removed
  ECSSpotFleetScalerLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Join ["/", ["/aws/lambda", !Ref ECSSpotFleetScalerFunction]]
      RetentionInDays: 1

  ECSSpotFleetScalerFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref LambdaBucket
        S3Key: "ecs-spotfleet-scaler.zip"
        S3ObjectVersion: !Ref LambdaObjectVersion
      Role: !GetAtt ECSSpotFleetScalerLambdaExecutionRole.Arn
      Timeout: 120
      Handler: handler
      Runtime: go1.x
      MemorySize: 128
      Environment:
        Variables:
          ECS_CLUSTER:     !Ref ECSCluster
          SPOT_FLEET:      !Ref SpotFleet
          MIN_SIZE:        !Ref MinSize
          MAX_SIZE:        !Ref MaxSize
          LAMBDA_TIMEOUT:  1m
          LAMBDA_INTERVAL: 20s

Outputs:
  SpotFleet:
    Description: The SpotFleet created
    Value: !Ref SpotFleet

  ECSCluster:
    Description: The ECS Cluster created
    Value: !Ref ECSCluster
